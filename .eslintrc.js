const isProduction = process.env.NODE_ENV === 'production'

module.exports = {
  parser: '@typescript-eslint/parser',
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'prettier',
    // 'prettier/@typescript-eslint',
  ],
  plugins: ['@typescript-eslint', 'prettier', 'import'],
  parserOptions: {
    project: './tsconfig.json',
    ecmaVersion: 2018,
    sourceType: 'module',
    warnOnUnsupportedTypeScriptVersion: false,
  },
  env: { browser: true },
  ignorePatterns: ['.eslintrc.js'],
  rules: {
    'prettier/prettier': 'error',
    // '@typescript-eslint/no-floating-promises': 'error',
    'require-await': 'error',
    'comma-spacing': ['error', { before: false, after: true }],
    'import/no-namespace': 'off',
    // 'import/no-default-export': 'error',
    'no-invalid-this': 'error',
    // 'no-autofix/no-unreachable': 'error',
    'space-in-parens': 'error',
    'no-empty-function': 'off',
    // temporary fix to allow Function
    '@typescript-eslint/ban-types': ['off'],
    '@typescript-eslint/no-empty-function': ['off'],
    '@typescript-eslint/no-unused-vars': 'error',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-explicit-any': 'off',
    'space-before-function-paren': 'off',
    'eol-last': 'off',
    'operator-linebreak': 'off',
    'no-useless-escape': 'off',
    'no-var': 'error',
    'no-console': isProduction ? 'error' : 'warn',
    'no-func-assign': 'error',
    'no-const-assign': 'error',
    'no-class-assign': 'error',
    'no-param-reassign': 'error',
    'object-curly-spacing': ['error', 'always'],
    'array-bracket-spacing': ['error', 'never'],
    'linebreak-style': ['error', 'unix'],
    'no-trailing-spaces': 'error',
    'import/no-duplicates': 'error',
    'import/named': 'error',
    'import/default': 'error',
    'import/order': [
      'error',
      {
        groups: [
          ['builtin', 'external', 'internal', 'unknown'],
          ['parent', 'sibling', 'index'],
        ],
        alphabetize: { order: 'asc', caseInsensitive: true },
        'newlines-between': 'always',
      },
    ],
    camelcase: ['error', { properties: 'never' }],

    // enforced functional rules
    'prefer-const': 'error',
    // 'functional/prefer-type-literal': 'error',
    // 'functional/no-loop-statement': 'error',
    // 'functional/no-let': 'error',

    // // not enforced functional rules
    // 'functional/immutable-data': 'off',
    // 'functional/no-try-statement': 'off',
    // 'functional/no-throw-statement': 'off',
    // 'functional/no-expression-statement': 'off',
    // 'functional/prefer-readonly-type': 'off',
    // 'functional/functional-parameters': 'off',
    // '@typescript-eslint/explicit-function-return-type': 'off',
    // 'functional/no-conditional-statement': 'off',
    // 'functional/no-mixed-type': 'off',
  },
}
